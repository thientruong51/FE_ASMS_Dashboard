import type { BoxData } from "./types";

// üß± Lo·∫°i th√πng
type BoxType = "A" | "B" | "C" | "D";

// üì¶ K√≠ch th∆∞·ªõc (D √ó R √ó C, m√©t) ‚Äî D: chi·ªÅu d√†i (Z), R: chi·ªÅu s√¢u (X), C: chi·ªÅu cao (Y)
const BOX_SIZES: Record<BoxType, [number, number, number]> = {
  A: [0.5, 0.5, 0.45],
  B: [0.75, 0.75, 0.45],
  C: [1.0, 0.5, 0.45],
  D: [0.6, 0.6, 0.8],
};

// üß± K√≠ch th∆∞·ªõc t·ªïng th·ªÉ c·ªßa k·ªá (m)
const SHELF_BOUNDS = {
  length: 1.7, // theo tr·ª•c Z (d√†i)
  depth: 1.07, // theo tr·ª•c X (s√¢u)
  height: 6.2, // theo tr·ª•c Y (cao)
};

// üß≠ Chi·ªÅu cao ƒë√°y t·ª´ng t·∫ßng (t·ªïng cao 6.2 m)
const FLOOR_BASE = [-0.1, 1.19, 2.47, 3.57];

// ‚öôÔ∏è C·∫•u h√¨nh t·ª´ng t·∫ßng
const FLOOR_CONFIG = {
  1: { usableTypes: ["A", "B", "C"] as BoxType[], stack: 2 },
  2: { usableTypes: ["A", "B", "C"] as BoxType[], stack: 2 },
  3: { usableTypes: ["A", "B", "C"] as BoxType[], stack: 2 },
  4: { usableTypes: ["D"] as BoxType[], stack: 2 }, // t·∫ßng 4 ch·ªâ ch·ª©a D
};

// ‚öôÔ∏è Offset tinh ch·ªânh v·ªã tr√≠ h·ªôp trong l√≤ng k·ªá (m)
const OFFSET_Y = -0.15; // h·∫° nh·∫π xu·ªëng m·∫∑t s√†n
const OFFSET_Z = -0.6; // ƒë·∫©y v√†o trong l√≤ng k·ªá

/**
 * üßÆ T√≠nh to√°n b·ªë c·ª•c th√πng cho 1 t·∫ßng
 */
export function computeBoxesForFloor(floor: number): BoxData[] {
  const config = FLOOR_CONFIG[floor as 1 | 2 | 3 | 4];
  const floorBase = FLOOR_BASE[floor - 1];
  const usable = config.usableTypes;
  const boxes: BoxData[] = [];
  const gap = 0.001;

  // ‚úÖ Gi·ªõi h·∫°n theo chi·ªÅu d√†i (Z direction)
  const halfLength = SHELF_BOUNDS.length / 2;
  const maxZ = halfLength - gap;
  const minZ = -halfLength + gap;

  const xCenter = 0; // gi·ªØa chi·ªÅu s√¢u (X)

  // ‚úÖ ∆Øu ti√™n lo·∫°i to h∆°n tr∆∞·ªõc
  const sortedTypes = [...usable].sort(
    (a, b) => BOX_SIZES[b][0] - BOX_SIZES[a][0]
  );

  let zCursor = minZ;

  while (zCursor < maxZ) {
    const type =
      sortedTypes[Math.floor(Math.random() * sortedTypes.length)];
    const [length, , height] = BOX_SIZES[type]; // D √ó R √ó C

    if (zCursor + length / 2 > maxZ) break;

    // ‚úÖ x·∫øp ch·ªìng theo chi·ªÅu cao (Y)
    for (let layer = 0; layer < config.stack; layer++) {
      const y = floorBase + height / 2 + layer * (height + 0.02); // layer 2 l·ªõp

      boxes.push({
        id: `F${floor}-${type}-${zCursor.toFixed(2)}-${layer}`,
        type,
        floor,
        // ‚öôÔ∏è v·ªã tr√≠ cu·ªëi c√πng
        position: [xCenter , y - OFFSET_Y, zCursor + length / 2 + OFFSET_Z],
        status: Math.random() > 0.8 ? "shipping" : "stored",
        productName: ["Laptop", "Phone", "TV", "Printer", "Camera"][
          Math.floor(Math.random() * 5)
        ],
        quantity: Math.floor(Math.random() * 40) + 10,
      });
    }

    // sang v·ªã tr√≠ k·∫ø ti·∫øp
    zCursor += length + gap;
  }

  return boxes;
}

/**
 * ‚úÖ Mock d·ªØ li·ªáu tƒ©nh (static)
 */
const STATIC_DATA: Record<number, BoxData[]> = {
  1: computeBoxesForFloor(1),
  2: computeBoxesForFloor(2),
  3: computeBoxesForFloor(3),
  4: computeBoxesForFloor(4),
};

/**
 * ‚úÖ H√†m ch√≠nh ‚Äî sinh d·ªØ li·ªáu mock
 * @param mode "static" ho·∫∑c "random"
 */
export function getAllFloorsMock(
  mode: "static" | "random" = "static"
): Record<number, BoxData[]> {
  if (mode === "random") {
    return {
      1: computeBoxesForFloor(1),
      2: computeBoxesForFloor(2),
      3: computeBoxesForFloor(3),
      4: computeBoxesForFloor(4),
    };
  }
  return STATIC_DATA;
}
